var referenceBS = 20000101
var refenreceAD = 19430414

//store the total days in month of AD and BS
var AD = {}
var BS = {}

//dates stored as array
var ADDates = [];
var BSDates = [];

//mapping between dates
var ADBS = {}
var BSAD = {}

//AD has only two variants based on leap or non leap year
AD['leap']		= [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
AD['nonleap']	= [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

//Could not find any formula that directly gets the number of days in particular month of year in BS
BS[2000] = [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31]
BS[2001] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2002] = [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30]
BS[2003] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2004] = [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31]
BS[2005] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2006] = [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30]
BS[2007] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2008] = [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31]
BS[2009] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2010] = [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30]
BS[2011] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2012] = [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30]
BS[2013] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2014] = [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30]
BS[2015] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2016] = [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30]
BS[2017] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2018] = [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30]
BS[2019] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31]
BS[2020] = [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2021] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2022] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30]
BS[2023] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31]
BS[2024] = [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2025] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2026] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2027] = [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31]
BS[2028] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2029] = [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30]
BS[2030] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2031] = [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31]
BS[2032] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2033] = [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30]
BS[2034] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2035] = [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31]
BS[2036] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2037] = [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30]
BS[2038] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2039] = [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30]
BS[2040] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2041] = [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30]
BS[2042] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2043] = [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30]
BS[2044] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2045] = [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30]
BS[2046] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2047] = [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2048] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2049] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30]
BS[2050] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31]
BS[2051] = [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2052] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2053] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30]
BS[2054] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31]
BS[2055] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2056] = [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30]
BS[2057] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2058] = [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31]
BS[2059] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2060] = [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30]
BS[2061] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2062] = [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31]
BS[2063] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2064] = [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30]
BS[2065] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2066] = [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31]
BS[2067] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2068] = [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30]
BS[2069] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2070] = [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30]
BS[2071] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2072] = [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30]
BS[2073] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31]
BS[2074] = [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2075] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2076] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30]
BS[2077] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31]
BS[2078] = [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2079] = [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30]
BS[2080] = [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30]
BS[2081] = [31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30]
BS[2082] = [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30]
BS[2083] = [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30]
BS[2084] = [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30]
BS[2085] = [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30]
BS[2086] = [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30]
BS[2087] = [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30]
BS[2088] = [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30]
BS[2089] = [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30]
BS[2090] = [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30]

//pushing all BS dates from 2000 01 01 to 2090 12 30 into an array
for(var year in BS){
	console.log(year);
	console.log(BS[year]);
	for(var month in BS[year]){
		var monthDays = BS[year][month];
		for(var i = 1; i <= monthDays; i++){
			BSDates.push(year*10000+(parseInt(month)+1)*100+i);
		}
	}
}
var length = BSDates.length

//pushing same number of dates (denoted by length) in AD into another array
//this ensures 1 to 1 mapping between arrays BSBates and ADDates eg 100th element of BSDate and 100th element of ADDate correspond to same day

//number of dates inserted into array
var datesInserted = 0
var year = 1943
var month = 4
var date = 14
var monthDays = [];
if(isLeapYear(year)){
	monthDays = AD['leap'];
}
else{
	monthDays = AD['nonleap'];
}
while(datesInserted < length){
	ADDates.push(year*10000+(month)*100+date);
	datesInserted++;
	date++;
	if(date>monthDays[month-1]){
		date = 1;
		month++;
	}
	if(month>12){
		month = 1;
		year++;
		if(isLeapYear(year)){
			monthDays = AD['leap'];
		}
		else{
			monthDays = AD['nonleap'];
		}
	}
}

//filling the hashmaps BSAD and ADBS
for(var i = 0; i< length; i++){
	BSAD[BSDates[i]]=ADDates[i];
	ADBS[ADDates[i]]=BSDates[i];
}

//date conversion hashmaps are now ready. they can be used as:
//convert 2018/12/15 to BS
console.log(ADBS[20181215])
//convert 2075/09/02 to AD
console.log(BSAD[20750902])

//function to test whether a particular year is leap year or not
function isLeapYear(year) { return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0); }
